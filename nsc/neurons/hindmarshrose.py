# -*- coding: utf-8 -*-

'''
Created on Fri May 31 23:24:47 2019


Author: Guilherme Marino Toso
Title = hindmarshrose
Project = Semi-Supervised Learning Using Competition for Neurons' Synchronization
Package = neurons

Discription:
   A Neural Dynamical System is a set of differential equations that discribes
   the time evolution of the differential equations' variables as the action
   potential generated by a neuron and which is a variable in common with all
   the models. The model presented here is the Hindmarsh - Rose. This model 
   were first studied at a graduation project called "Análise de Sincronização em 
   Modelos de Osciladores Acoplados". 

'''


import numpy as np


class HindmarshRose():
    
    '''
    
    This is the Hindmarsh-Rose Neural Dyanamical System Model 
    
    '''
    
    
    def __init__(self, a, b, c, d, r, s, xr, I):
        
        '''
        
        Args:
            a: control parameter of the fast ion channel variable
            b: control parameter of the fast ion channel variable
            c: control parameter of the fast ion channel variable
            d: control parameter of the fast ion channel variable
            r: control parameter of the slow ion channel variable
            s and xr are normally constants.
            I: input current

        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of parameters values, means there's a 1-dimensional
            array of neurons.

            Note: the parameters must have the same shape.
        
        Data Type:

            It can be integer ('int') or floating ('float') values.

        Returns the parameters of the Hindmarsh-Rose Model.

        '''
        
        self.a = a
        self.b = b       
        self.c = c       
        self.d = d       
        self.r = r       
        self.s = s       
        self.xr = xr       
        self.I = I
        
        
    def potential(self, x, y, z):
        
        '''
        Return the value(s) of the membrane potential

        Args:
            x: membrane potential
            y: fast ion channel
            z: slow ion channel

        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of parameters, potential (x), fast ion channel (y) and
            slow ion channel (z) values, means there's a 1-dimensional
            array of neurons.

            Note: The variables (x, y and z) must have the same shape.
            The parameters can be a scalar or must have the same shape
            as the variables.
        
        Data Type:

            It can be integer ('int') or floating ('float') values.

        '''
        
        x_value = y - self.a*x**3 + self.b*x**2 + self.I - z
        
        return x_value
    
    
    def fast_ion_channel(self, x, y):
        
        '''
        Returns the value of the fast ion channel variable.

        Args:

            x: membrane potential
            y: fast ion channel
        
        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of parameters, potential (x) and fast ion channel (y)
            values, means there's a 1-dimensional array of neurons.

            Note: The variables (x, y and z) must have the same shape.
            The parameters can be a scalar or must have the same shape
            as the variables.
        
        Data Type:

            It can be integer ('int') or floating ('float') values. 
        '''
               
        y_value = self.c - self.d*x**2 - y
        
        return y_value
    
    
    def slow_ion_channel(self, x, z):
        
        '''
        Returns the value of the slow ion channel variable    

        Args:

            x: membrane potential
            z: slow ion channel   

        
        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of parameters, potential (x) and slow ion channel (z)
            values, means there's a 1-dimensional array of neurons.

            Note: The variables (x, y and z) must have the same shape.
            The parameters can be a scalar or must have the same shape
            as the variables.
        
        Data Type:

            It can be integer ('int') or floating ('float') values.


        '''
        z_value = self.r*(self.s*(x - self.xr) - z)
        
        return z_value
    
    
    
    
    
