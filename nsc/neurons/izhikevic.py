
'''
Author: Guilherme Marino Toso
Title = izhikevic
Project = Semi-Supervised Learning Using Competition for Neurons' Synchronization
Package = neurons

Discription:
   A Neural Dynamical System is a set of differential equations that discribes
   the time evolution of the differential equations' variables as the action
   potential generated by a neuron and which is a variable in common with all
   the models. The model presented here is the Izhikevic. This model 
   was first studied at a graduation project called "Análise de Sincronização em 
   Modelos de Osciladores Acoplados". 

'''
import numpy as np
 
class Izhikevic():
    
    '''
    
    This class calculates the Izhikevic Neural Dynamics Model
    
    '''
    
    def __init__(self, a, b, c, d):
        
        '''
        
        Args:
            a: Time scale of the recovery variable (u). Dimensioneless parameter
            b: Sensitivity of the recovery variable (u) due to the subthreshold
               fluctuations of the membrane potential (v). Dimensioneless parameter
            c: Reset value of the membrane potential (v). Dimensioneless parameter
            d: Reset value of the recovery variable (v). Dimensioneless parameter

        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of parameters values, means there's a 1-dimensional
            array of neurons.

            Note: the parameters must have the same shape.
        
        Data Type:

            It can be integer ('int') or floating ('float') values.

        Returns the parameters of the Izhikevich Model.

        '''
        
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        
        
    def potential(self,v,u,I):
        
        '''
        
        This function calculates the potential variables.

        Args:

            v: membrane potential (dimensionless)
            u: recovery variable (dimensionless)
            I: input ectrical current


        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of parameters values, means there's a 1-dimensional
            array of neurons.

            Note: If there's more than one parameter, than the shape of the
                  parameters' array must have the same shape of the variables (v and u).
        
        Data Type:

            It can be integer ('int') or floating ('float') values.

        Returns the membrane potential value. 

        
        '''
        v_val = 0.04*v**2 + 5*v + 140 - u + I
    
        return v_val
    
    
    def recovery(self,v,u):
    
        '''
        
        This function calculates the recovery varbiable

        Args:

            v: membrane potential (dimensionless)
            u: recovery variable (dimensionless)

        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of parameters values, means there's a 1-dimensional
            array of neurons.

            Note: If there's more than one parameter, than the shape of the
                  parameters' array must have the same shape of the variables (v and u).
        
        Data Type:

            It can be integer ('int') or floating ('float') values.

        Returns the new vale of the recovery variable

        '''
        
        rec_val  = self.a*(self.b*v - u)
    
        return rec_val
    
    
    def update(self,v,u):
        
        '''
       
        This method updates the u and v values after reaching the threshold


        Args:

            v: membrane potential (dimensionless)
            u: recovery variable (dimensionless)

        Returns the updated values of potential and recoveriness after 
        reaching the threshold
       
        '''
        
        new_v = np.where(v>=30, self.c, v)
        new_u = np.where(v>=30, u + self.d, u)
       
       
        return new_v, new_u
