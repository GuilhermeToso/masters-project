'''
Author: Guilherme Marino Toso
Title = aihara
Project = Semi-Supervised Learning Using Competition for Neurons' Synchronization
Package = neurons

Discription:
   A Neural Dynamical System is a set of differential equations that discribes
   the time evolution of the differential equations' variables as the action
   potential generated by a neuron and which is a variable in common with all
   the models. The model presented here is the Aihara. This model 
   were studied first at a graduation project called "Análise de Sincronização em 
   Modelos de Osciladores Acoplados". 

'''


import numpy as np

class Aihara():
    
    '''
    
    This is the class of the Aihara Chaotic Neural Model
    
    '''
    
    
    def __init__(self, a, alpha, k, epsilon):
        
        '''
        
        Args:
            a: bifurcation parameter
            alpha: positive parameter
            k: damping factor at the hyperpolarization moment. It varies between 0 and 1.
            epsilon: slope parameter

        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of parameters values, means there's a 1-dimensional
            array of neurons.

            Note: the parameters must have the same shape.
        
        Data Type:

            It can be integer ('int') or floating ('float') values.

        Returns the parameters of the Aihara Model

        ''' 
        
        self.a = a
        self.alpha = alpha
        self.k = k
        self.epsilon = epsilon
        
        
    def logistic(self,variable):
        
        '''
        
        This method calculates the logistic function of a certain variable.

        Args:

            Variable: a generic variable that will be an input to the logistic
                      function.

        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of variable values, means there's a 1-dimensional
            array of neurons.

            Note: if the parameter epsilon has more than a value, necessarily 
                  'variable' and 'epsilon' must have the same shape.
        
        Data Type:

            It can be integer ('int') or floating ('float') values.

        Returns the value calculated by the logistic function.
        
        '''
        
        logist = 1/(1 + np.exp((-variable)/self.epsilon))
        
        return logist
    
    def internalState(self,y):
        
        '''
        
        This method calculates the internal state of the neurons.

        Args:

            y: The previous internal state in time t-1
        
        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of y values, means there's a 1-dimensional
            array of neurons.

            Note: if one or more parameters has more than a value, necessarily 
                  'variable' and the parameters with more than a value must have
                   the same shape.
        
        Data Type:

            It can be integer ('int') or floating ('float') values.

        Returns the next internal state of time t.
       
        '''
        
        internal_state = self.k*y - self.alpha*self.logistic(y) + self.a
       
        return internal_state
    
    def output(self,next_y):
        
        '''
        
        This method calculates the output by receiving the value of the internal state(s)

        Args:

            next_y: The internal state calculated in time t.
        
        
        Dimensions:

            It can be a n-dimensional Numpy array. Each value is 
            respective to a neuron, so, for example: A 1-dimensional
            array of next_y values, means there's a 1-dimensional
            array of neurons.

        
        Data Type:

            It can be integer ('int') or floating ('float') values.

        Returns the output state.
       
        '''
        
        output_state = self.logistic(next_y)
        
        return output_state
